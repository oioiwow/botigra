const { Bot, InlineKeyboard } = require('grammy');
require('dotenv').config();

const bot = new Bot(process.env.BOT_TOKEN);


const games = new Map();


bot.command('start', (ctx) => {
    const helpText = `üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞"!\n\n` +
                    `–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:\n` +
                    `1. –ù–∞–∂–º–∏ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n` +
                    `2. –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É: –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞\n` +
                    `3. –ë–æ—Ç –ø–æ–¥–±—Ä–æ—Å–∏—Ç –º–æ–Ω–µ—Ç—É –∏ –æ–±—ä—è–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n` +
                    `4. –°—ã–≥—Ä–∞–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏ –∏–≥—Ä—É\n\n` +
                    `–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏`;
    
    ctx.reply(helpText);
});


bot.command('play', (ctx) => {
    const userId = ctx.from.id;
    games.set(userId, { status: 'waiting_for_bet' });
    
    const betKeyboard = new InlineKeyboard()
        .text('–û—Ä—ë–ª', 'heads')
        .text('–†–µ—à–∫–∞', 'tails');
    
    ctx.reply('–°–¥–µ–ª–∞–π —Å–≤–æ—é —Å—Ç–∞–≤–∫—É:', { reply_markup: betKeyboard });
});


bot.command('help', (ctx) => {
    ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
              `/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n` +
              `/play - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n` +
              `/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n` +
              `–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n` +
              `1. –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É: –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞\n` +
              `2. –ë–æ—Ç –ø–æ–¥–±—Ä–æ—Å–∏—Ç –º–æ–Ω–µ—Ç—É\n` +
              `3. –ï—Å–ª–∏ —É–≥–∞–¥–∞–ª - –ø–æ–±–µ–¥–∞!\n` +
              `4. –ú–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑`);
});


bot.on('callback_query:data', async (ctx) => {
    const userId = ctx.from.id;
    const data = ctx.callbackQuery.data;
    
    try {
        
        if (data === 'heads' || data === 'tails') {
            if (!games.has(userId)) {
                await ctx.reply('–ù–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /play');
                return;
            }
            
            const userBet = data;
            const result = Math.random() < 0.5 ? 'heads' : 'tails'; // 50/50
            
            const betText = userBet === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
            const resultText = result === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
            
            let message = `–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞: ${betText}\n` +
                         `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultText}\n\n` +
                         `${userBet === result ? 'üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª!' : 'üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª'}`;
            
            
            const playAgainKeyboard = new InlineKeyboard()
                .text('–î–∞', 'play_again')
                .text('–ù–µ—Ç', 'end_game');
            
            await ctx.reply(message, { reply_markup: playAgainKeyboard });
            await ctx.answerCallbackQuery();
            
            
            games.set(userId, { status: 'finished', lastResult: result });
        }
        
        else if (data === 'play_again') {
            const betKeyboard = new InlineKeyboard()
                .text('–û—Ä—ë–ª', 'heads')
                .text('–†–µ—à–∫–∞', 'tails');
            
            await ctx.reply('–°–¥–µ–ª–∞–π –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É:', { reply_markup: betKeyboard });
            await ctx.answerCallbackQuery();
            
            games.set(userId, { status: 'waiting_for_bet' });
        }
        
        else if (data === 'end_game') {
            await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏ /play');
            await ctx.answerCallbackQuery();
            
            games.delete(userId);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑');
    }
});


bot.catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});


bot.start();
console.log('–ë–æ—Ç "–û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞" –∑–∞–ø—É—â–µ–Ω...');